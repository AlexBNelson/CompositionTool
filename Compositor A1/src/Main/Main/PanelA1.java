/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Alex Nelson
 */

//IMPLEMENT EXIT FUNCTION
//CANT SEEM TO PROPERLY IMPLEMENT OPTIONPANE
//USING PALETTE
public class PanelA1 extends javax.swing.JFrame {

    private ArrayList<JLabel> visualComponentList; //List containing references to jLabels
    //PUBLIC ??
    private int pointXStart;//Interim variable for drawing CompositionElements
    private int pointYStart;
    private int pointXEnd;//Interim variable for drawing CompositionElements
    private int pointYEnd;
    private DefaultMutableTreeNode tracing;
    private SerializableComposite serComField; //Serializable class containing array of geometric primitives and base image
    private ArrayList<DefaultMutableTreeNode> nodeList;//List of all the nodes referring to JLabels in the sidebar 
    private DefaultMutableTreeNode rootNode;
    private DefaultMutableTreeNode topNode; //node just below rootNode
   private DefaultTreeModel treeModel;//variable used in side menu
   private File file; //the image file converted to ImageJLab
   private BufferedImage buffImg;
   private DefaultTreeModel defModel;
   private ImageJLab baseLabel;
   private String Url=null; //The url of the base image
//Used as interface for saving and opening
    /**
     * Creates new form NewJFrame
     */
    public PanelA1() {
        initComponents();
        initUserGen();
        
    }
private void initUserGen(){// Custom initlialization code
    
pointXStart=0;
pointXEnd=0;
pointYStart=0;
pointXEnd=0;
topNode=new DefaultMutableTreeNode("Tracings");

}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        NodeClickMenu = new javax.swing.JPopupMenu();
        ChangeColor = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jColorChooser1 = new javax.swing.JColorChooser();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        rootNode=new DefaultMutableTreeNode("Tracing");
        ElementsTree = new javax.swing.JTree(rootNode);
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        New = new javax.swing.JMenuItem();
        AddImage = new javax.swing.JMenu();
        DrawL = new javax.swing.JMenuItem();
        DrawR = new javax.swing.JMenuItem();
        DrawCustom = new javax.swing.JMenuItem();
        CreateCustom = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle(null);

        ChangeColor.setText("Change Color");
        ChangeColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeColorActionPerformed(evt);
            }
        });
        NodeClickMenu.add(ChangeColor);

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ElementsTree.setEditable(true);
        jScrollPane1.setViewportView(ElementsTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jLayeredPane1);

        jMenu3.setText("File");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        Open.setText(" Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu3.add(Open);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu3.add(Save);

        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        jMenu3.add(New);

        jMenuBar2.add(jMenu3);

        AddImage.setText("Edit");
        AddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddImageActionPerformed(evt);
            }
        });

        DrawL.setText("Draw Line");
        DrawL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawLActionPerformed(evt);
            }
        });
        AddImage.add(DrawL);

        DrawR.setText("Draw Rect");
        DrawR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawRActionPerformed(evt);
            }
        });
        AddImage.add(DrawR);

        DrawCustom.setText("Draw Custom");
        DrawCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrawCustomActionPerformed(evt);
            }
        });
        AddImage.add(DrawCustom);

        CreateCustom.setText("Create Custom");
        AddImage.add(CreateCustom);

        jMenuBar2.add(AddImage);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        //Opens and deserializes image/composition composite placing
        //it in the CompositeLabel label1 in the JPanel
        //SET SERIALIZABE FileFilter
        //WILL NEED TO BE EXTENSIVELY UPDATED
        fileChooser.setDialogTitle("Open");
        int returnVal = fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        
     serComField=(new SerializableComReader(file)).getSerCom();
        
        
        try {
            
            baseLabel=serComField.getImageJLab();
            for(int i=0; i<serComField.getLines().size(); i++) {
                
                visualComponentList.add(serComField.getLines().get(i));
            jLayeredPane1.add(visualComponentList.get(visualComponentList.size()-1));
            }
            
          
        }catch (Exception ex) {
          System.out.println("problem accessing file"+file.getAbsolutePath());
        }
    } else {
        System.out.println("File access cancelled by user.");
        JOptionPane.showMessageDialog(null, "Incompatible file");
    }
    }//GEN-LAST:event_OpenActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        fileChooser.setDialogTitle("Save");
        if(serComField!=null){fileChooser.showSaveDialog(this);}//PUT IN TRY STATEMENT FOR Headless EXCEPTION??
        else{
            JOptionPane.showMessageDialog(null, "No working file");
        }
    }//GEN-LAST:event_SaveActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        
        int result;//GARBAGE COLLECTION??
        if(serComField!=null){result=JOptionPane.showConfirmDialog(this, 
    "Any unsaved progress will be deleted. "
    + "Do you wish to continue?","Create New",
    JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);}
        else{
            result=JOptionPane.OK_OPTION;
        }
        if(result==JOptionPane.OK_OPTION){
            jLayeredPane1.removeAll();
            //THROWING EXCEPTION WHEN TRYING TO CLEAR NULL POINTERS
            if(visualComponentList!=null){visualComponentList.clear();}
            if(serComField!=null){serComField.clearSerCom();}
            this.setTitle("New Composition"); //MAY BE INADVISABLE
        
        }
        else{
        //Do Nothing
    }
        
         
         fileChooser.setDialogTitle("Open Image");
         
        int returnVal=fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        Url= fileChooser.getSelectedFile().getAbsolutePath();}
        //System.out.println(Url); confirms that url is obtained successfully
       
        
       ImageIcon icon = createImageIcon(Url);
       
        
         baseLabel=new ImageJLab(icon);//ALL THIS WILL NEED RATIONALISING
         baseLabel.setBounds(0, 0, 500, 500);
         //jLayeredPane1.setLayout(null);//ALLOWING ME TO USE THE MANUAL SetSize() METHOD
         
         
         
       jLayeredPane1.add(baseLabel);
       jLayeredPane1.repaint();
       serComField=new SerializableComposite(baseLabel);
       visualComponentList=new ArrayList<>();
       nodeList=new ArrayList<>();
       //Code for creation of tree
      // ElementsTree.setEditable(true);
    //rootNode = new DefaultMutableTreeNode("Root Node");
    //treeModel = new DefaultTreeModel(null);
//treeModel.addTreeModelListener(new ElementsTreeListener());

//ElementsTree = new JTree(rootNode);
//ElementsTree.setModel(treeModel);
//rootNode.add(new DefaultMutableTreeNode("Books for Java Programmers"));
//ElementsTree.setRootVisible(false);

    
//ElementsTree.getSelectionModel().setSelectionMode
       // (TreeSelectionModel.SINGLE_TREE_SELECTION);
       // rootNode.add(topNode);
//ElementsTree.addTreeSelectionListener(new TreeSelectionListener() {
   //@Override
    //public void valueChanged(TreeSelectionEvent e) {
        //DefaultMutableTreeNode node = (DefaultMutableTreeNode)
        //                   ElementsTree.getLastSelectedPathComponent();

    /* if nothing is selected */ 
     //   if (node == null) return;

    /* retrieve the node that was selected */ 
    //    Object nodeInfo = node.getUserObject();
        
    /* React to the node selection. */
    //ADD LISTENER FOR TRACING HERE
    //}
//});

        
        
    }//GEN-LAST:event_NewActionPerformed
    
   
    protected ImageIcon createImageIcon(String path) {//function to which the code for creating and resizing the icon to fit the screen is delegated
    //BufferedImage bimg=null; 
        
        //BufferedImage dimg=null;
        //try {
           // bimg = ImageIO.read(new File(Url));
            
       // dimg = bimg.getScaledInstance(width, height,
        //Image.SCALE_SMOOTH);
        //} catch (IOException ex) {
           // Logger.getLogger(PanelA1.class.getName()).log(Level.SEVERE, null, ex);
       // }
        
    if (path != null) {// 300 AS WIDTH AND HEIGHT ARE MAGIC NUMBERS, PARAMETERIZE??
        return new ImageIcon(new ImageIcon(path).getImage().getScaledInstance(400, 300, Image.SCALE_DEFAULT));
    } else {
        
        return null;
    }

}
    private void AddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddImageActionPerformed

    }//GEN-LAST:event_AddImageActionPerformed

    private void DrawCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawCustomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DrawCustomActionPerformed

    private void DrawRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawRActionPerformed
        MouseAdapter ml;
        ml = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                jLayeredPane1.setCursor(new Cursor(Cursor.HAND_CURSOR));
                pointXStart = e.getX();
                pointYStart=e.getY();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                pointXEnd = e.getX();
                pointYEnd=e.getY();
                
                RectTracing linet=new RectTracing(pointXStart, pointXEnd, pointYStart, pointYEnd);
                
              int xOrigin;//For SetBounds() method
              int yOrigin;//For SetBounds() method
              int xWidth;//For SetBounds() method
              int yWidth;//For SetBounds() method
                
        if (pointXStart>pointXEnd){
 
            xWidth=pointXStart-pointXEnd;
            xOrigin=pointXEnd;
        }
        else{
            xWidth=pointXEnd-pointXStart;
            xOrigin=pointXStart;
        }
        if(pointYStart>pointYEnd){
            yWidth=pointYStart-pointYEnd;
            yOrigin=pointYEnd;
        }
        else{
            yWidth=pointYEnd-pointYStart;
            yOrigin=pointYStart;
        }
                linet.setBounds(xOrigin, yOrigin, xWidth, yWidth);
                //initializeCEJLab(linet);//MAYBE NEED A WAY OF ENSURING xp[1] IS BIGGER THAN xp[0]
                visualComponentList.add(linet);
                
                jLayeredPane1.add(visualComponentList.get(visualComponentList.size()-1));
               
                jLayeredPane1.moveToFront(visualComponentList.get(visualComponentList.size()-1));
                
     
     
    
               jLayeredPane1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));//NOT SURE WHETHER THERE IS AN OPTIMAL ORDER FOR THESE ACTIONS
                jLayeredPane1.removeMouseListener(this);
               jLayeredPane1.repaint();
              DefaultTreeModel model = (DefaultTreeModel) ElementsTree.getModel();  
            //tracing= new TracingNode("Rect Tracing" + " " + Integer.toString(visualComponentList.size()), visualComponentList.size()-1);
            tracing=new TracingNode("Rect Tracing" + Integer.toString(visualComponentList.size()), visualComponentList.get(visualComponentList.size()-1), NodeClickMenu);
            DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
root.add(tracing);
model.reload(root);
        }};
            jLayeredPane1.addMouseListener(ml);
    }//GEN-LAST:event_DrawRActionPerformed

    // LOOK INTO DIFFERENT APPROACHES TO ADDING AND REMOVING MOUSELISTENERS
    
    public void paintComponent(){
        super.repaint();
    }
    //Code for Drawing Line
    private void DrawLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawLActionPerformed
        //SORT OUT NEW ITEM FIRST
        
        MouseAdapter ml;
        ml = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                jLayeredPane1.setCursor(new Cursor(Cursor.HAND_CURSOR));
                pointXStart = e.getX();
                pointYStart=e.getY();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                pointXEnd = e.getX();
                pointYEnd=e.getY();
                
                LineTracing linet=new LineTracing(pointXStart, pointXEnd, pointYStart, pointYEnd);
                
              int xOrigin;//For SetBounds() method
              int yOrigin;//For SetBounds() method
              int xWidth;//For SetBounds() method
              int yWidth;//For SetBounds() method
                
        if (pointXStart>pointXEnd){
 
            xWidth=pointXStart-pointXEnd;
            xOrigin=pointXEnd;
        }
        else{
            xWidth=pointXEnd-pointXStart;
            xOrigin=pointXStart;
        }
        if(pointYStart>pointYEnd){
            yWidth=pointYStart-pointYEnd;
            yOrigin=pointYEnd;
        }
        else{
            yWidth=pointYEnd-pointYStart;
            yOrigin=pointYStart;
        }
                linet.setBounds(xOrigin, yOrigin, xWidth, yWidth);
                //initializeCEJLab(linet);//MAYBE NEED A WAY OF ENSURING xp[1] IS BIGGER THAN xp[0]
                visualComponentList.add(linet);
                
                jLayeredPane1.add(visualComponentList.get(visualComponentList.size()-1));
               
                jLayeredPane1.moveToFront(visualComponentList.get(visualComponentList.size()-1));
                
     
     
    
               jLayeredPane1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));//NOT SURE WHETHER THERE IS AN OPTIMAL ORDER FOR THESE ACTIONS
                jLayeredPane1.removeMouseListener(this);
               jLayeredPane1.repaint();
              DefaultTreeModel model = (DefaultTreeModel) ElementsTree.getModel();  
           // tracing= new TracingNode("Line Tracing" + " " + Integer.toString(visualComponentList.size()), visualComponentList.size()-1);
            tracing=new TracingNode("Line tracing" + Integer.toString(visualComponentList.size()), visualComponentList.get(visualComponentList.size()-1), NodeClickMenu);
            DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
root.add(tracing);
model.reload(root);
        }};
            jLayeredPane1.addMouseListener(ml);
            
            
    }//GEN-LAST:event_DrawLActionPerformed

    private void ChangeColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeColorActionPerformed
        Color current=new Color(1,1, 1);
        jColorChooser1.showDialog(null, "Choose a color", current);//third argument is initial color
    }//GEN-LAST:event_ChangeColorActionPerformed
//Creates and draws a GeneralTracing component, adding mouseListener for menu tree 
    private void addToTree (JLabel ce){
    
                
                //adds new node to the side menu
               
                rootNode.add(nodeList.get(nodeList.size()-1));}
 

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AddImage;
    private javax.swing.JMenuItem ChangeColor;
    private javax.swing.JMenuItem CreateCustom;
    private javax.swing.JMenuItem DrawCustom;
    private javax.swing.JMenuItem DrawL;
    private javax.swing.JMenuItem DrawR;
    private javax.swing.JTree ElementsTree;
    private javax.swing.JMenuItem New;
    private javax.swing.JPopupMenu NodeClickMenu;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Save;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}